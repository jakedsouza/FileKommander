/*
*  preprocessingObjects.jape
* Assumptions - files must have 3 character extensions e.g - xyz.abc i.e filename.extension(3 chars)
*
* The Phase recognises various actions 
*/

Phase: preprocessingObjects
Input: Lookup Token Sentence action closeAction createAction deleteAction existsAction insertAction openAction removeAction	renameAction replaceAction statsAction
Options:debug = true  control = appelt
// test for abc.xyz abc.wxyz
Macro: SIMPLEFILENAME
(

	(
		{Token.kind== word}
		{Token.category == "." , Token.kind == punctuation}
		( {Token.kind == word , Token.length == 3 } | {Token.kind == word , Token.length == 4 })
	)	
)

Macro: QUOTEDFILENAME
(
	(
		( 
			{Token.string == "\"" , Token.kind == punctuation} |
			{Token.string == "\'" , Token.kind == punctuation}
		) 						
		(				 
				(SIMPLEFILENAME)
		)
				
		( 
				{Token.string == "\"" , Token.kind == punctuation} |
				{Token.string == "\'" , Token.kind == punctuation}
		) 
	)	
)

Rule: SimpleFileName
(

( SIMPLEFILENAME )


):simpleFileName

--> 
:simpleFileName
  {
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("simpleFileName");	
	Annotation firstAnn = matchedAnns.iterator().next();
	System.out.println(firstAnn.getFeatures());
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","SimpleFileName");
	//annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"fileObjectRef", newFeatures);
  outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"simpleFileName", newFeatures);
  }
 
Rule: QuotedFileName
(
( QUOTEDFILENAME ):quotedFilename
)

--> 
:quotedFilename
  {
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("quotedFilename");	
    System.out.println(matchedAnns);
    //Annotation firstAnn = matchedAnns.iterator().next();
//	System.out.println(firstAnn.getFeatures());
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","QuotedFileName");
	//annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"fileObjectRef", newFeatures);
  outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"quotedFilename", newFeatures);
  }		

/* - folder objects */


Rule: DirectoryObjectRef
(
{Lookup.minorType == directory}
):directoryObjectRef

--> 
:directoryObjectRef
  {
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("directoryObjectRef");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","DirectoryObjectRef");
	//annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"directoryObjectRef", newFeatures);
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"directoryObjectRef", newFeatures);
  }
   
 /* - string/phrase objects */


Rule: PhraseObjectRef
(
{Lookup.minorType == phrase}
):phraseObjectRef

--> 
:phraseObjectRef
  {
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("phraseObjectRef");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("rule","PhraseObjectRef");
	//annotations.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"phraseObjectRef", newFeatures);
    outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"phraseObjectRef", newFeatures);
  }  
  