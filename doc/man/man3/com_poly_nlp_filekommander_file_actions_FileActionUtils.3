.TH "com.poly.nlp.filekommander.file.actions.FileActionUtils" 3 "Sat Dec 22 2012" "Version 0.001" "FileKommander" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.poly.nlp.filekommander.file.actions.FileActionUtils \- 
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static String \fBgetWorkingDirectory\fP ()"
.br
.ti -1c
.RI "static void \fBsetWorkingDirectory\fP (String \fBworkingDirectory\fP)"
.br
.ti -1c
.RI "static String \fBcreateFile\fP (String name)"
.br
.ti -1c
.RI "static String \fBcreateFolder\fP (String name)"
.br
.ti -1c
.RI "static String \fBdeleteFile\fP (String fileName)"
.br
.ti -1c
.RI "static String \fBdeleteFolder\fP (String folderName)"
.br
.ti -1c
.RI "static String \fBexists\fP (String name)"
.br
.ti -1c
.RI "static String \fBopen\fP (String name)"
.br
.ti -1c
.RI "static String \fBrename\fP (String oldName, String newName)"
.br
.ti -1c
.RI "static String \fBinsert\fP (String phraseToBeInserted, String existingPhrase, String position, String repetition, String fileName)"
.br
.ti -1c
.RI "static void \fBstats\fP (String parentObjectName, int statsType, int parentObjectType)  throws IOException "
.br
.ti -1c
.RI "static void \fBstats\fP (String parentObjectName, String wordToBeCounted)  throws IOException "
.br
.ti -1c
.RI "static void \fBcount\fP (String parentObjectName, String wordToBeCounted)  throws IOException "
.br
.ti -1c
.RI "static void \fBcount\fP (String parentObjectName, int parentObjectType, String type)  throws IOException "
.br
.ti -1c
.RI "static String \fBremove\fP (String phraseToBeRemoved, String repetition, String fileName)"
.br
.ti -1c
.RI "static String \fBreplace\fP (String phraseToBeInserted, String existingPhrase, String repetition, String fileName)"
.br
.ti -1c
.RI "static int \fBcountWords\fP (String fileName)"
.br
.ti -1c
.RI "static ArrayList< String > \fBlistFiles\fP (String folderName, ArrayList< String > list)"
.br
.ti -1c
.RI "static String \fBlastModified\fP (String parentObjectName)"
.br
.ti -1c
.RI "static int \fBcountSpecificWord\fP (String parentObjectName, String wordToBeCounted)"
.br
.ti -1c
.RI "static String \fBsizeOf\fP (String parentObjectName)"
.br
.ti -1c
.RI "static int \fBcountFiles\fP (String parentObjectName)"
.br
.in -1c
.SS "Static Package Functions"

.in +1c
.ti -1c
.RI "static long \fBsizeofDirectory\fP (File f)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static String \fBprintSize\fP (long b)"
.br
.ti -1c
.RI "static int \fBcountSubFiles\fP (File f)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final Logger \fBlog\fP = Logger\&.getLogger(FileActionUtils\&.class)"
.br
.ti -1c
.RI "static String \fBworkingDirectory\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 26 of file FileActionUtils\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static void com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.count (StringparentObjectName, StringwordToBeCounted)  throws IOException \fC [static]\fP"

.PP
Definition at line 499 of file FileActionUtils\&.java\&.
.PP
.nf
                               {
        File f = new File(workingDirectory + parentObjectName);
        String line = '';
        int count = 0;
        if (f\&.exists()) {
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            while ((line = br\&.readLine()) != null) {
                count += StringUtils\&.countMatches(line, wordToBeCounted);
            }
            br\&.close();
        }
    }
.fi
.SS "static void com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.count (StringparentObjectName, intparentObjectType, Stringtype)  throws IOException \fC [static]\fP"

.PP
Definition at line 514 of file FileActionUtils\&.java\&.
.PP
.nf
                                            {
        File f = new File(workingDirectory + parentObjectName);
        if (type\&.equals('words')) {
            if (f\&.exists()) {
                FileReader fr = new FileReader(f);
                BufferedReader br = new BufferedReader(fr);
                StreamTokenizer stz = new StreamTokenizer(br);
                int index = 0;
                int numWords = 0;

                while (index != StreamTokenizer\&.TT_EOF) {
                    index = stz\&.nextToken();
                    numWords++;
                }

                log\&.info(' No \&. of words in file = ' + numWords +' ');
            } else {
                log\&.info('This file doesn't exists\&.');
            }
        } else if (type\&.equals('files')) {
            int count = 0;
            int countDirectory = 0;
            int countAll = 0;
            for (File file : f\&.listFiles()) {
                if (file\&.isFile()) {
                    count++;
                } else if (file\&.isDirectory()) {
                    countDirectory++;
                }
            }
            countAll = count + countDirectory;
            log\&.info('Number of files: ' + count);
            log\&.info('Number of folders:' + countDirectory);
            log\&.info('Number of files and folders: ' + countAll);
        }
    }
.fi
.SS "static int com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.countFiles (StringparentObjectName)\fC [static]\fP"

.PP
Definition at line 828 of file FileActionUtils\&.java\&.
.PP
.nf
                                                          {
        File f;
        if (parentObjectName\&.equals(workingDirectory)) {
            f = new File(parentObjectName);
        } else {
            f = new File(workingDirectory + parentObjectName);
        }
        int c = countSubFiles(f);
        log\&.info('count is' + c);
        return c;
    }
.fi
.SS "static int com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.countSpecificWord (StringparentObjectName, StringwordToBeCounted)\fC [static]\fP"

.PP
Definition at line 732 of file FileActionUtils\&.java\&.
.PP
.nf
                                    {
        File f = new File(workingDirectory + parentObjectName);
        String line = '';
        int count = 0;

        try {
            if (f\&.exists()) {
                FileReader fr = new FileReader(f);
                BufferedReader br = new BufferedReader(fr);
                while ((line = br\&.readLine()) != null) {
                    count += StringUtils\&.countMatches(line, wordToBeCounted);
                }
                br\&.close();
            }
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e\&.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e\&.printStackTrace();
        }
        log\&.info('the no of times the word ' + wordToBeCounted + ' appears is '
                + count);
        return count;
    }
.fi
.SS "static int com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.countSubFiles (Filef)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 840 of file FileActionUtils\&.java\&.
.PP
.nf
                                             {
        int count = 0;
        int countDirectory = 0;
        int countAll = 0;
        for (File file : f\&.listFiles()) {
            if (file\&.isFile()) {
                count++;
            } else if (file\&.isDirectory()) {
                countDirectory += countSubFiles(file);
            }
        }
        return count++;

    }
.fi
.SS "static int com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.countWords (StringfileName)\fC [static]\fP"

.PP
Definition at line 665 of file FileActionUtils\&.java\&.
.PP
.nf
                                                  {
        File f = new File(workingDirectory + fileName);
        int numWords = 0;
        if (f\&.exists()) {
            try {
                FileReader fr;
                fr = new FileReader(f);

                BufferedReader br = new BufferedReader(fr);
                StreamTokenizer stz = new StreamTokenizer(br);
                int index = 0;

                while (index != StreamTokenizer\&.TT_EOF) {
                    index = stz\&.nextToken();
                    numWords++;
                }

                log\&.info('no\&. of words in file = ' + numWords);

            } catch (FileNotFoundException e) {
                e\&.printStackTrace();
            } catch (IOException e) {
                e\&.printStackTrace();
            } finally {
                log\&.info('Some error reading the file');
            }
        } else {
            log\&.info('This file doesn't exists\&.');
        }
        return numWords;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.createFile (Stringname)\fC [static]\fP"
Creates a new File and returns the error message
.PP
\fBParameters:\fP
.RS 4
\fIname\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 51 of file FileActionUtils\&.java\&.
.PP
.nf
                                                 {
        String errorMsg = '';
        name = name\&.replaceAll('^[\&.\\\\/:*?\'<>|]?[\\\\/:*?\'<>|]*', '');
        if (name\&.length() == 0) {
            errorMsg = 'File named ' + name
                    + ' is of zero length after removing special characters';
        } else {
            File file = new File(workingDirectory + name);
            if (file\&.exists()) {
                errorMsg = 'File : ' + name + ' already exists';
                log\&.error(errorMsg);
            } else {
                try {
                    File parent = file\&.getParentFile();
                    if (!parent\&.exists()) {
                        try {
                            FileUtils\&.forceMkdir(parent);
                        } catch (Exception e) {
                            errorMsg = 'Could not create the parent folder for the file';
                            e\&.printStackTrace();
                            return errorMsg;
                        }
                    }
                    file\&.createNewFile();
                    log\&.info('file created successfully\&.');
                } catch (IOException e) {
                    errorMsg = 'Error creating File ' + e\&.getMessage();
                    e\&.printStackTrace();
                }
            }
        }
        return errorMsg;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.createFolder (Stringname)\fC [static]\fP"
Creates a new Folder and returns the error message
.PP
\fBParameters:\fP
.RS 4
\fIname\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 91 of file FileActionUtils\&.java\&.
.PP
.nf
                                                   {
        String errorMsg = '';
        name = name\&.replaceAll('^[\&.\\\\/:*?\'<>|]?[\\\\/:*?\'<>|]*', '');
        try {
            Boolean success = new File(workingDirectory + name)\&.mkdirs();
            if (!success) {
                errorMsg = 'Could not create folder : ' + name;
                log\&.error(errorMsg);
            } else {
                log\&.info('Folder created successfully');
            }
        } catch (Exception e) {
            errorMsg = 'Could not create folder : ' + e\&.getMessage();
            e\&.printStackTrace();
        }
        return errorMsg;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.deleteFile (StringfileName)\fC [static]\fP"

.PP
Definition at line 142 of file FileActionUtils\&.java\&.
.PP
.nf
                                                     {
        String errorMsg = '';
        File file = new File(workingDirectory + fileName);
        if (!file\&.exists()) {
            errorMsg = 'File ' + fileName
                    + ' does not exist so can not delete ';
        } else {
            try {
                FileUtils\&.forceDelete(file);
            } catch (IOException e) {
                errorMsg = 'Could not delete file ' + e\&.getMessage();
                e\&.printStackTrace();
            }
        }
        return errorMsg;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.deleteFolder (StringfolderName)\fC [static]\fP"

.PP
Definition at line 159 of file FileActionUtils\&.java\&.
.PP
.nf
                                                         {
        String errorMsg = '';
        File file = new File(workingDirectory + folderName);
        if (!file\&.exists()) {
            errorMsg = 'Folder ' + folderName
                    + ' does not exist so can not delete ';
        } else {
            try {
                FileUtils\&.forceDelete(file);
            } catch (IOException e) {
                errorMsg = 'Could not delete folder ' + e\&.getMessage();
                e\&.printStackTrace();
            }
        }
        return errorMsg;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.exists (Stringname)\fC [static]\fP"

.PP
Definition at line 234 of file FileActionUtils\&.java\&.
.PP
.nf
                                             {
        String message = '';

        System\&.out\&.println('name of object is' + name);
        try {
            File file = new File(workingDirectory + name);
            if (file\&.exists()) {
                message = '<html>' + name + ' exists at <u>'
                        + file\&.getAbsolutePath() + '</u></html>';
                System\&.out\&.println('File/Folder exists!');
            } else {
                message = 'File/Folder ' + name + ' doesn't exist!';
                System\&.out\&.println(message);
            }

        } catch (Exception e) {
            e\&.printStackTrace();
        }

        return message;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.getWorkingDirectory ()\fC [static]\fP"
\fBReturns:\fP
.RS 4
the workingDirectory 
.RE
.PP

.PP
Definition at line 33 of file FileActionUtils\&.java\&.
.PP
.nf
                                               {
        return workingDirectory;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.insert (StringphraseToBeInserted, StringexistingPhrase, Stringposition, Stringrepetition, StringfileName)\fC [static]\fP"

.PP
Definition at line 388 of file FileActionUtils\&.java\&.
.PP
.nf
                             {
        File file = new File(workingDirectory + fileName);
        String message = '';
        int count = 0; // TODO
        if (file\&.exists()) {

            String contents;
            try {
                contents = FileUtils\&.readFileToString(file);
            } catch (Exception e) {
                message = 'Error reading the file ';
                e\&.printStackTrace();
                return message;
            }
            String newString = '';
            Pattern p = Pattern\&.compile(existingPhrase);
            Matcher m = p\&.matcher(contents);
            if (m\&.find()) {
                if (position\&.contains('before')) {
                    newString = phraseToBeInserted + ' ' + existingPhrase;
                    if (repetition\&.contains('first')) {
                        contents = contents\&.replaceFirst(existingPhrase,
                                newString);
                    } else if (repetition\&.contains('last')) { // contents =
                                                                // contents\&.replaceFirst(existingPhrase,
                                                                // newString);
                        newString = existingPhrase + ' ' + phraseToBeInserted;
                        String contentsRev = StringUtils\&.reverse(contents);
                        contentsRev = StringUtils\&.replaceOnce(contentsRev,
                                existingPhrase, newString);
                        contents = StringUtils\&.reverse(contentsRev);
                        // contents = contents\&.substring(0,
                        // contents\&.lastIndexOf(existingPhrase) + 1)
                        // +' ' + newString;
                    } else if (repetition\&.contains('every')
                            || repetition\&.contains('all')) {
                        contents = contents\&.replace(existingPhrase, newString);
                    } else {
                        contents = contents\&.replace(existingPhrase, newString);
                    }
                } else if (position\&.contains('after')) {
                    newString = existingPhrase + ' ' + phraseToBeInserted;
                    if (repetition\&.contains('every')
                            || repetition\&.contains('all'))
                        contents = contents\&.replace(existingPhrase, newString);
                    if (repetition\&.contains('first'))
                        contents = contents\&.replaceFirst(existingPhrase,
                                newString);
                    if (repetition\&.contains('last')) {
                        // contents = contents\&.substring(0,
                        // contents\&.lastIndexOf(existingPhrase)) + newString;
                        newString = phraseToBeInserted + ' ' + existingPhrase;
                        String contentsRev = StringUtils\&.reverse(contents);
                        contentsRev = StringUtils\&.replaceOnce(contentsRev,
                                existingPhrase, newString);
                        contents = StringUtils\&.reverse(contentsRev);
                    }
                } else if (position\&.contains('beginning')
                        || position\&.contains('start')) {
                    contents = phraseToBeInserted + ' ' + contents;
                } else if (position\&.contains('end')) {
                    contents = contents + ' ' + phraseToBeInserted;
                }
                // log\&.info(contents);
                try {
                    FileUtils\&.writeStringToFile(file, contents);
                } catch (IOException e) {
                    message = ' Error writing to file ';
                    e\&.printStackTrace();
                }
                message = 'Inserted phrase ' + phraseToBeInserted + ' '
                        + position + ' ' + repetition + ' occurence of word '
                        + existingPhrase;
            } else {
                message = 'The phrase ' + existingPhrase
                        + ' cant be found in the file';
            }
        } else {
            message = 'This file doesnt exists';
        }
        return message;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.lastModified (StringparentObjectName)\fC [static]\fP"

.PP
Definition at line 716 of file FileActionUtils\&.java\&.
.PP
.nf
                                                               {
        File f = new File(workingDirectory + parentObjectName);
        String dateString = '';
        if (f\&.isFile()) {
            long datetime = f\&.lastModified();
            Date d = new Date(datetime);
            SimpleDateFormat sdf = new SimpleDateFormat('dd-MM-yyyy hh:mm:ss');
            dateString = sdf\&.format(d);
            log\&.info('The file ' + parentObjectName + ' was last modified on: '
                    + dateString);
        }
        return 'The file ' + parentObjectName + ' was last modified on: '
                + dateString;
    }
.fi
.SS "static ArrayList<String> com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.listFiles (StringfolderName, ArrayList< String >list)\fC [static]\fP"

.PP
Definition at line 697 of file FileActionUtils\&.java\&.
.PP
.nf
                                    {
        // f = new File('testDir/'+f);
        File f = new File(workingDirectory + folderName);
        if (f\&.isDirectory()) {
            File[] subFiles = f\&.listFiles();
            for (File file : subFiles) {
                if (file\&.isFile()) {
                    list\&.add(file\&.getName());
                } else {
                    list = listFiles(file\&.getName(), list);
                }
            }
        } else {
            log\&.info('only files in the folder can be listed\&.');
        }
        return list;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.open (Stringname)\fC [static]\fP"

.PP
Definition at line 256 of file FileActionUtils\&.java\&.
.PP
.nf
                                           {
        String message = '';
        if (name\&.equals('') || name\&.equals('')) {
            message = 'File Name is empty';
            return message;
        }
        // String workingDirectory =
        // FileKommanderRun\&.getKommander()\&.getWorkingDirectory();
        // String workingDirectory = 'testDir/';
        File file = new File(workingDirectory + name);
        if (!file\&.exists()) {
            message = 'File ' + name + ' does not exist in the directory ';
            // FileKommanderRun\&.getGuiv2()\&.displayErrorMessage(message);
            return message;
        }
        try {
            if (OSDetector\&.isWindows()) {
                System\&.out\&.println(file\&.getAbsolutePath());
                String[] command = new String[] { 'rundll32\&.exe',
                        'url\&.dll,FileProtocolHandler', file\&.getAbsolutePath() };
                System\&.out\&.println(Arrays\&.toString(command));
                Process process = Runtime\&.getRuntime()\&.exec(command);
                message = 'File ' + name + ' opened successfully';
                return message;
            } else if (OSDetector\&.isLinux() || OSDetector\&.isMac()) {
                Runtime\&.getRuntime()
                        \&.exec(new String[] { '/usr/bin/open',
                                file\&.getAbsolutePath() });
                message = 'Opened successfully';
                return message;
            } else {
                // Unknown OS, try with desktop
                if (Desktop\&.isDesktopSupported()) {
                    Desktop\&.getDesktop()\&.open(file);
                    message = 'Opened successfully';
                    return message;
                } else {
                    message = 'Unsuccessfull open';
                    return message;
                }
            }
        } catch (Exception e) {
            e\&.printStackTrace(System\&.err);
            message = 'Unable to open';
            return message;
        }
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.printSize (longb)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 798 of file FileActionUtils\&.java\&.
.PP
.nf
                                            {
        long k = b / 1024;
        long m = k / 1024;
        long g = m / 1024;
        if (b < 1024) {
            return ('The size of the file is ' + b + ' Bytes');
        } else if (k < 1024) {
            return ('The size of the file is ' + k + ' KB');
        } else if (m < 1024) {
            return ('The size of the file is ' + m + ' MB');
        } else {
            return ('The size of the file is ' + g + ' GB');
        }
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.remove (StringphraseToBeRemoved, Stringrepetition, StringfileName)\fC [static]\fP"

.PP
Definition at line 552 of file FileActionUtils\&.java\&.
.PP
.nf
                             {
        String message = '';
        File file = new File(workingDirectory + fileName);
        String contents = '';

        if (file\&.exists()) {
            try {
                contents = FileUtils\&.readFileToString(file);
            } catch (Exception e) {
                message = 'Error reading the file ';
                e\&.printStackTrace();
                return message;
            }
            Pattern p = Pattern\&.compile(phraseToBeRemoved);
            Matcher m = p\&.matcher(contents);
            String newString = '';
            if (m\&.find()) {
                if (repetition\&.contains('first')) {
                    contents = contents\&.replaceFirst(phraseToBeRemoved, '');
                } else if (repetition\&.contains('last')) {
                    String contentsRev = StringUtils\&.reverse(contents);
                    contentsRev = contentsRev\&.replaceFirst(phraseToBeRemoved,
                            '');
                    contents = StringUtils\&.reverse(contentsRev);
//                  contents = contents\&.substring(0,
//                          contents\&.lastIndexOf(phraseToBeRemoved) + 1)
//                          + '';
                } else if (repetition\&.contains('every')
                        || repetition\&.contains('all')) {
                    contents = contents\&.replace(phraseToBeRemoved, '');
                }
                message = 'Removed ' + repetition + ' string ' + phraseToBeRemoved + ' successfully ' ;

            } else {
                message = 'The phrase ' + phraseToBeRemoved
                        + ' cant be found in the file ' + fileName;
            }

        } else {
            message = 'File ' + fileName + ' does not exists';
        }

        // log\&.info(contents);
        try {
            FileUtils\&.writeStringToFile(file, contents);
        } catch (IOException e) {
            message = ' Error writing to file ';
            e\&.printStackTrace();
        }

        return message;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.rename (StringoldName, StringnewName)\fC [static]\fP"

.PP
Definition at line 304 of file FileActionUtils\&.java\&.
.PP
.nf
                                                                {
        String errorMsg = '';
        if (oldName\&.equals(null) || oldName\&.equals('') || newName\&.equals(null)
                || newName\&.equals('')) {
            errorMsg = 'Rename action failed as the new or old names were empty';
            // FileKommanderRun\&.getGuiv2()\&.displayErrorMessage(errorMsg);
            return errorMsg;
        }
        // String workingDirectory =
        // FileKommanderRun\&.getKommander()\&.getWorkingDirectory();
        // File (or directory) with old name
        File file = new File(workingDirectory + oldName);

        if (!file\&.exists()) {
            errorMsg = 'File ' + oldName + 'doesnot exist in the directory ';
            // FileKommanderRun\&.getGuiv2()\&.displayErrorMessage(errorMsg);
            return errorMsg;
        }

        // File (or directory) with new name
        File file2 = new File(workingDirectory + newName);
        if (file2\&.exists()) {
            errorMsg = 'File ' + newName + ' exists in the directory ';
            FileKommanderRun\&.getGuiv2()\&.displayErrorMessage(errorMsg);
            return errorMsg;
        }
        // Rename file (or directory)
        boolean success = file\&.renameTo(file2);
        if (!success) {
            errorMsg = 'Error renaming file';
            return errorMsg;
            // FileKommanderRun\&.getGuiv2()\&.displayErrorMessage(errorMsg);
        } else {
            System\&.out\&.println('Rename successful');
        }
        return errorMsg;

    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.replace (StringphraseToBeInserted, StringexistingPhrase, Stringrepetition, StringfileName)\fC [static]\fP"

.PP
Definition at line 606 of file FileActionUtils\&.java\&.
.PP
.nf
                                                                       {

        String message = '';
        File file = new File(workingDirectory + fileName);
        String contents = '';

        if (file\&.exists()) {
            try {
                contents = FileUtils\&.readFileToString(file);
            } catch (Exception e) {
                message = 'Error reading the file ';
                e\&.printStackTrace();
                return message;
            }
            Pattern p = Pattern\&.compile(existingPhrase);
            Matcher m = p\&.matcher(contents);
            String newString = '';
            if (m\&.find()) {
                if (repetition\&.contains('first'))
                    contents = contents\&.replaceFirst(existingPhrase,
                            phraseToBeInserted);
                else if (repetition\&.contains('last'))
                // contents = contents\&.replaceFirst(existingPhrase, newString);
                {
                    String contentsRev = StringUtils\&.reverse(contents);
                    contentsRev = contentsRev\&.replaceFirst(existingPhrase,
                            phraseToBeInserted);
                    contents = StringUtils\&.reverse(contentsRev);
                    // contents = contents\&.substring(0,
                    // contents\&.lastIndexOf(existingPhrase) + 1) +
                    // phraseToBeInserted;
                } else if (repetition\&.contains('every')
                        || repetition\&.contains('all'))
                    contents = contents\&.replace(existingPhrase,
                            phraseToBeInserted);
                message = 'Replaced ' + repetition + ' string '
                        + existingPhrase + ' with ' + phraseToBeInserted
                        + ' successfully ';
            } else {
                message = 'The phrase ' + phraseToBeInserted
                        + ' cant be found in the file ' + fileName;
            }

        } else {
            message = 'File ' + fileName + ' does not exists';
        }

        // log\&.info(contents);
        try {
            FileUtils\&.writeStringToFile(file, contents);
        } catch (IOException e) {
            message = ' Error writing to file ';
            e\&.printStackTrace();
        }

        return message;
    }
.fi
.SS "static void com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.setWorkingDirectory (StringworkingDirectory)\fC [static]\fP"
\fBParameters:\fP
.RS 4
\fIworkingDirectory\fP the workingDirectory to set 
.RE
.PP

.PP
Definition at line 41 of file FileActionUtils\&.java\&.
.PP
.nf
                                                                    {
        FileActionUtils\&.workingDirectory = workingDirectory;
    }
.fi
.SS "static String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.sizeOf (StringparentObjectName)\fC [static]\fP"

.PP
Definition at line 774 of file FileActionUtils\&.java\&.
.PP
.nf
                                                         {
        File f;
        long b, bd;
        if (parentObjectName\&.equals(workingDirectory))
            f = new File(parentObjectName);
        else
            f = new File(workingDirectory + parentObjectName);
        if (f\&.exists()) {
            if (f\&.isDirectory()) {
                bd = sizeofDirectory(f);
                return printSize(bd);
            } else {
                b = f\&.length();
                return printSize(b);
            }

        } else {
            return ('File doesn't exists\&.');
        }
        // return printSize(bd);

    }
.fi
.SS "static long com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.sizeofDirectory (Filef)\fC [static]\fP, \fC [package]\fP"

.PP
Definition at line 814 of file FileActionUtils\&.java\&.
.PP
.nf
                                        {
        long size = 0;
        File[] subFiles = f\&.listFiles();
        for (File file : subFiles) {
            if (file\&.isFile()) {
                size += file\&.length();
            } else {
                size += sizeofDirectory(file);
            }
        }
        return size;
    }
.fi
.SS "static void com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.stats (StringparentObjectName, intstatsType, intparentObjectType)  throws IOException \fC [static]\fP"

.PP
Definition at line 475 of file FileActionUtils\&.java\&.
.PP
.nf
                                                     {

        if (statsType == FileKommander\&.COUNT) {
            if (parentObjectType == FileKommander\&.FILE) {
                count(parentObjectName, parentObjectType, 'words');

            } else if (parentObjectType == FileKommander\&.DIRECTORY) {
                count(parentObjectName, parentObjectType, 'files');
            }
        } else if (statsType == FileKommander\&.SIZEOF) {
            sizeOf(parentObjectName);
        }

    }
.fi
.SS "static void com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.stats (StringparentObjectName, StringwordToBeCounted)  throws IOException \fC [static]\fP"

.PP
Definition at line 492 of file FileActionUtils\&.java\&.
.PP
.nf
                               {

        count(parentObjectName, wordToBeCounted);

    }
.fi
.SH "Member Data Documentation"
.PP 
.SS "final Logger com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.log = Logger\&.getLogger(FileActionUtils\&.class)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 27 of file FileActionUtils\&.java\&.
.SS "String com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.FileActionUtils\&.workingDirectory\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 28 of file FileActionUtils\&.java\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for FileKommander from the source code\&.
