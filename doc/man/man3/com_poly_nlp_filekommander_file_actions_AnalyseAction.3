.TH "com.poly.nlp.filekommander.file.actions.AnalyseAction" 3 "Sat Dec 22 2012" "Version 0.001" "FileKommander" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.poly.nlp.filekommander.file.actions.AnalyseAction \- 
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseAction\fP (String actionType, Annotation annotation)"
.br
.ti -1c
.RI "static ArrayList< String > \fBgetObjectNameFromAnnotation\fP (FeatureMap featureMap, String key)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseCreateAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseDeleteAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseExistsAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalysePhraseAction\fP (Annotation annotation, String actionType)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseInsertAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseOpenAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseRemoveAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseRenameAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseReplaceAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseStatsAction\fP (Annotation annotation, String actionType)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final Logger \fBlog\fP = Logger\&.getLogger(AnalyseAction\&.class)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBAuthor:\fP
.RS 4
neha , jake 
.RE
.PP

.PP
Definition at line 32 of file AnalyseAction\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseAction (StringactionType, Annotationannotation)\fC [static]\fP"

.PP
Definition at line 35 of file AnalyseAction\&.java\&.
.PP
.nf
                                   {
        if (actionType == null)
            return null;
        GenericActionModel returnModel = null;

        switch (actionType) {
        case 'close':
            // AnalyseCloseAction(annotation);
            break;
        case 'create':
            returnModel = analyseCreateAction(annotation);
            break;
        case 'delete':
            returnModel = analyseDeleteAction(annotation);
            break;
        case 'exist':
            returnModel = analyseExistsAction(annotation);
            break;
        case 'insert':
            returnModel = analysePhraseAction(annotation, actionType);
            break;
        case 'open':
            returnModel = analyseOpenAction(annotation);
            break;
        case 'remove':
            returnModel = analysePhraseAction(annotation, actionType);
            break;
        case 'rename':
            returnModel = analyseRenameAction(annotation);
            break;
        case 'replace':
            returnModel = analysePhraseAction(annotation, actionType);
            break;
        case 'stats':
            returnModel = analyseStatsAction(annotation, actionType);
            break;
        default:
            break;
        }
        return returnModel;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseCreateAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 79 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        CreateModel createModel = new CreateModel();
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                createModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                createModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    createModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }
        log\&.info('Files to be Created : ' + fileNamesList);
        log\&.info('Directories to be Created : ' + directoryNamesList);
        log\&.info('Files to be Created : ' + quotedObjectNamesList);
        return createModel;
    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseDeleteAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 111 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        DeleteModel deleteModel = new DeleteModel();
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                deleteModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                deleteModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    deleteModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }
        log\&.info('Files to be deleted : ' + fileNamesList);
        log\&.info('Directories to be Created : ' + directoryNamesList);
        log\&.info('Directories to be Created : ' + quotedObjectNamesList);
        return deleteModel;
    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseExistsAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 143 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        ExistsModel existsModel = new ExistsModel();
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                existsModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                existsModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    existsModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }

        return existsModel;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseInsertAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 255 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {

        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        ArrayList<String> phraseList = getObjectNameFromAnnotation(featureMap,
                'phraseName');
        PhraseOperationModel phraseOperationModel = new PhraseOperationModel();
        phraseOperationModel\&.setOperationType(FileKommander\&.INSERT);

        phraseOperationModel\&.setRepetition(getObjectNameFromAnnotation(
                featureMap, 'position')\&.get(0));
        // phraseOperationModel\&.set
        String position = phraseOperationModel\&.getRepetition();
        // String newPhrase = '';
        // String oldPhrase = '';

        // phraseOperationModel\&.setRepetition(repetition)

        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (phraseList\&.contains(quotedName))
                    phraseOperationModel\&.setNewPhrase(quotedName);
                else
                    phraseOperationModel\&.setOldPhrase(quotedName);
            }
        }

        return phraseOperationModel;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseOpenAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 289 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                               {
        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        OpenModel openModel = new OpenModel();
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                openModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                openModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    openModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }

        return openModel;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analysePhraseAction (Annotationannotation, StringactionType)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 174 of file AnalyseAction\&.java\&.
.PP
.nf
                                                      {

        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        ArrayList<String> phraseList = getObjectNameFromAnnotation(featureMap,
                'phraseName');
        PhraseOperationModel phraseOperationModel = new PhraseOperationModel();
        if (actionType\&.equalsIgnoreCase('insert'))
            phraseOperationModel\&.setOperationType(FileKommander\&.INSERT);
        else if (actionType\&.equalsIgnoreCase('replace'))
            phraseOperationModel\&.setOperationType(FileKommander\&.REPLACE);
        else if (actionType\&.equalsIgnoreCase('remove'))
            phraseOperationModel\&.setOperationType(FileKommander\&.REMOVE);
        for (String fileName : fileNamesList) {
            phraseOperationModel\&.add(fileName);
        }
        // phraseOperationModel\&.setFileListData(fileNamesList);
        ArrayList<String> repList = getObjectNameFromAnnotation(featureMap,
                'repitition');
        if (!repList\&.isEmpty()) {
            phraseOperationModel\&.setRepetition(repList\&.get(0));
        } else {
            phraseOperationModel\&.setRepetition('every');
        }

        // phraseOperationModel\&.set
        ArrayList<String> posList = getObjectNameFromAnnotation(featureMap,
                'position');
        if (!posList\&.isEmpty()) {
            phraseOperationModel\&.setPosition(posList\&.get(0));
        } else {
            phraseOperationModel\&.setPosition('after');
        }
        // String newPhrase = '';
        // String oldPhrase = '';

        // phraseOperationModel\&.setRepetition(repetition)

        ArrayList<String> phrases = getObjectNameFromAnnotation(featureMap,
                'quotedObject');
        if (phrases\&.size() <= 2) {
            if(phraseOperationModel\&.getOperationType() == FileKommander\&.INSERT ) {
            phraseOperationModel\&.setNewPhrase(phrases\&.get(0));
            phraseOperationModel\&.setOldPhrase(phrases\&.get(1));
            }else if(phraseOperationModel\&.getOperationType() == FileKommander\&.REMOVE){
            //  phraseOperationModel\&.setNewPhrase(phrases\&.get(1));
                phraseOperationModel\&.setOldPhrase(phrases\&.get(0));
            }else if(phraseOperationModel\&.getOperationType() == FileKommander\&.REPLACE){
                phraseOperationModel\&.setNewPhrase(phrases\&.get(1));
                phraseOperationModel\&.setOldPhrase(phrases\&.get(0));
            }
        } 
//      else if (phrases\&.size() == 1) {
//          phraseOperationModel\&.setNewPhrase(phrases\&.get(0));
//          phraseOperationModel\&.setOldPhrase('\\w');
//      }
        else {
            FileKommanderRun\&.getGuiv2()\&.displayErrorMessage(
                    'Multiple phrases found\&. Not sure what to do\&.');
            return null;
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (phraseList\&.contains(quotedName)) {
                    if (phraseOperationModel\&.getNewPhrase()\&.equals('')) {
                        phraseOperationModel\&.setNewPhrase(quotedName);
                    }
                } else {
                    if (phraseOperationModel\&.getOldPhrase()\&.equals('')) {
                        phraseOperationModel\&.setOldPhrase(quotedName);
                    }
                }
            }
        }
        return phraseOperationModel;
    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseRemoveAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 320 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        // TODO
        return null;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseRenameAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 326 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        FeatureMap featureMap = annotation\&.getFeatures();
        String content = (String) featureMap\&.get('content');

        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        fileNamesList\&.addAll(getObjectNameFromAnnotation(featureMap,
                'directoryName'));
        fileNamesList\&.addAll(getObjectNameFromAnnotation(featureMap,
                'quotedObject'));
        // ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
        // featureMap, 'directoryName');
        // ArrayList<String> quotedObjectNamesList =
        // getObjectNameFromAnnotation(
        // featureMap, 'quotedObject');
        RenameModel renameModel = new RenameModel();
        if (fileNamesList\&.size() == 2) {
            renameModel\&.setOldFileName(fileNamesList\&.get(0));
            renameModel\&.setNewFileName(fileNamesList\&.get(1));
            renameModel\&.setType(0);
            renameModel\&.setModelRun(false);
        } else {
            FileKommanderRun
                    \&.getGuiv2()
                    \&.displayErrorMessage(
                            'Multiple file/folder names found , unsure which to rename to which');
            return null;
        }
        return renameModel;
    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseReplaceAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 357 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                  {
        // TODO
        return null;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseStatsAction (Annotationannotation, StringactionType)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 363 of file AnalyseAction\&.java\&.
.PP
.nf
                               {
        StatsModel statsModel = new StatsModel();
        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> actionList = getObjectNameFromAnnotation(featureMap,
                'actions');
        String action = '';
        if (!actionList\&.isEmpty()) {
            action = actionList\&.get(0);
        } else {
            log\&.error('No stat action found');
        }

        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                statsModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                statsModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    statsModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }
        log\&.info('Files to be Created : ' + fileNamesList);
        log\&.info('Directories to be Created : ' + directoryNamesList);
        log\&.info('Files to be Created : ' + quotedObjectNamesList);
        if (action\&.equals('count') || action\&.contains('count')) {
            statsModel\&.setStatsType(FileKommander\&.COUNT);

        } else if (action\&.equals('size') || action\&.contains('size')) {
            statsModel\&.setStatsType(FileKommander\&.SIZEOF);
        } else if (action\&.equals('list') || action\&.contains('list')) {
            statsModel\&.setStatsType(FileKommander\&.LIST_FILES);
        } else if (action\&.equals('modified') || action\&.contains('modified')) {
            statsModel\&.setStatsType(FileKommander\&.LAST_MODIFIED);
        }else if (action\&.equals('list') || action\&.contains('list')) {
            statsModel\&.setStatsType(FileKommander\&.LIST_FILES);
        }
        return statsModel;
    }
.fi
.SS "static ArrayList<String> com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.getObjectNameFromAnnotation (FeatureMapfeatureMap, Stringkey)\fC [static]\fP"

.PP
Definition at line 417 of file AnalyseAction\&.java\&.
.PP
.nf
                                               {
        ArrayList<String> outputList = null;
        if (featureMap\&.containsKey(key)) {
            outputList = new ArrayList<String>();
            AnnotationSet objectNames = (AnnotationSet) featureMap\&.get(key);
            ArrayList<Annotation> objectList = new ArrayList<Annotation>(
                    objectNames);
            Collections\&.sort(objectList, new OffsetComparator());
            Iterator<Annotation> iterator = objectList\&.iterator();
            while (iterator\&.hasNext()) {
                Annotation object = iterator\&.next();
                if (object == null) {
                    // node =objectNames\&.nextNode(node) ;
                } else {
                    FeatureMap featureMap2 = object\&.getFeatures();
                    String objectName = (String) featureMap2\&.get('string');
                    objectName = objectName\&.replaceAll('\'', '');
                    outputList\&.add(objectName);
                    // node =objectNames\&.nextNode(node) ;
                }
            }

            // for (Annotation object : objectNames) {
            // FeatureMap featureMap2 = object\&.getFeatures();
            // String objectName = (String) featureMap2\&.get('string');
            // objectName = objectName\&.replaceAll('\'', '');
            // outputList\&.add(objectName);
            // }
        } else {
            return new ArrayList<String>();
        }

        return outputList\&.isEmpty() ? new ArrayList<String>() : outputList;

    }
.fi
.SH "Member Data Documentation"
.PP 
.SS "final Logger com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.log = Logger\&.getLogger(AnalyseAction\&.class)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 33 of file AnalyseAction\&.java\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for FileKommander from the source code\&.
