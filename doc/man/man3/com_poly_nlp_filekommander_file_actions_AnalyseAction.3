.TH "com.poly.nlp.filekommander.file.actions.AnalyseAction" 3 "Thu Dec 20 2012" "Version 0.001" "FileKommander" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.poly.nlp.filekommander.file.actions.AnalyseAction \- 
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseAction\fP (String actionType, Annotation annotation)"
.br
.ti -1c
.RI "static ArrayList< String > \fBgetObjectNameFromAnnotation\fP (FeatureMap featureMap, String key)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseCreateAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseDeleteAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseExistsAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseInsertAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseOpenAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseRemoveAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseRenameAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseReplaceAction\fP (Annotation annotation)"
.br
.ti -1c
.RI "static \fBGenericActionModel\fP \fBanalyseStatsAction\fP (Annotation annotation, String actionType)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final Logger \fBlog\fP = Logger\&.getLogger(AnalyseAction\&.class)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 20 of file AnalyseAction\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseAction (StringactionType, Annotationannotation)\fC [static]\fP"

.PP
Definition at line 23 of file AnalyseAction\&.java\&.
.PP
.nf
                                   {
        if (actionType == null)
            return null;
        GenericActionModel returnModel = null;

        switch (actionType) {
        case 'close':
            // AnalyseCloseAction(annotation);
            break;
        case 'create':
            returnModel = analyseCreateAction(annotation);
            break;
        case 'delete':
            returnModel = analyseDeleteAction(annotation);
            break;
        case 'exists':
            returnModel = analyseExistsAction(annotation);
            break;
        case 'insert':
            returnModel = analyseInsertAction(annotation);
            break;
        case 'open':
            returnModel = analyseOpenAction(annotation);
            break;
        case 'remove':
            returnModel = analyseRemoveAction(annotation);
            break;
        case 'rename':
            returnModel = analyseRenameAction(annotation);
            break;
        case 'replace':
            returnModel = analyseReplaceAction(annotation);
            break;
        case 'stats':
            returnModel = analyseStatsAction(annotation,actionType);
            break;
        default:
            break;
        }
        return returnModel;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseCreateAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 69 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        CreateModel createModel = new CreateModel();
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                createModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                createModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    createModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }
        log\&.info('Files to be Created : ' + fileNamesList);
        log\&.info('Directories to be Created : ' + directoryNamesList);
        log\&.info('Files to be Created : ' + quotedObjectNamesList);
        return createModel;
    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseDeleteAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 101 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        FeatureMap featureMap = annotation\&.getFeatures();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        DeleteModel deleteModel = new DeleteModel();
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                deleteModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                deleteModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    deleteModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }
        log\&.info('Files to be deleted : ' + fileNamesList);
        log\&.info('Directories to be Created : ' + directoryNamesList);
        log\&.info('Directories to be Created : ' + quotedObjectNamesList);
        return deleteModel;
    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseExistsAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 133 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        //TODO
        return null;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseInsertAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 139 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        //TODO
        return null;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseOpenAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 145 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                               {
        //TODO
        return null;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseRemoveAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 151 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        //TODO
        return null;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseRenameAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 157 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                 {
        FeatureMap featureMap = annotation\&.getFeatures();
        String content = (String) featureMap\&.get('content');
        
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        fileNamesList\&.addAll(getObjectNameFromAnnotation(
                featureMap, 'directoryName'));
        fileNamesList\&.addAll(getObjectNameFromAnnotation(
                featureMap, 'quotedObject'));
//      ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
//              featureMap, 'directoryName');
//      ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
//              featureMap, 'quotedObject');
        RenameModel renameModel = new RenameModel();
        if(fileNamesList\&.size() == 2){
            renameModel\&.setOldFileName(fileNamesList\&.get(0));
            renameModel\&.setNewFileName(fileNamesList\&.get(1));
            renameModel\&.setType(0);
            renameModel\&.setModelRun(false);
        }else{
            FileKommanderRun\&.getGuiv2()\&.displayErrorMessage('Multiple file/folder names found , unsure which to rename to which');
            return null ;
        }
        return renameModel;
    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseReplaceAction (Annotationannotation)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 184 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                  {
        //TODO
        return null;

    }
.fi
.SS "static \fBGenericActionModel\fP com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.analyseStatsAction (Annotationannotation, StringactionType)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 190 of file AnalyseAction\&.java\&.
.PP
.nf
                                                                                                   {
//      StatsModel statsModel = new StatsModel();
//        FeatureMap featureMap = annotation\&.getFeatures();
//        AnnotationSet actions = (AnnotationSet) featureMap\&.get('actions');
//        Annotation action  = null ;
//        Iterator iterator = actions\&.iterator() ;
//        String statType = '' ; 
//        while(iterator\&.hasNext()){
//          action = (Annotation) iterator\&.next() ; 
//          FeatureMap featureMap2 = action\&.getFeatures() ;
//          if(featureMap2\&.get('minorType')\&.equals('stats')){
//              statType  = ((String) featureMap2\&.get('string'))\&.toLowerCase(); 
//          }
//        }
////        String action = ((String)((Annotation)featureMap\&.get('actions'))\&.getFeatures()\&.get('string'))\&.toLowerCase();
//        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
//                        featureMap, 'fileName');
//        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
//                        featureMap, 'directoryName');
//        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
//                        featureMap, 'quotedObject');
//        if (fileNamesList != null) {
//                for (String fileName : fileNamesList) {
//                        statsModel\&.add(fileName, FileKommander\&.FILE);
//                }
//        }
//        if (directoryNamesList != null) {
//                for (String folderName : directoryNamesList) {
//                        statsModel\&.add(folderName, FileKommander\&.DIRECTORY);
//                }
//        }
//        if (quotedObjectNamesList != null) {
//                for (String quotedName : quotedObjectNamesList) {
//                        if (!fileNamesList\&.contains(quotedName)
//                                        && !directoryNamesList\&.contains(quotedName))
//                                statsModel\&.add(quotedName, FileKommander\&.DIRECTORY);
//                }
//        }
//        log\&.info('Files to be analysed : ' + fileNamesList);
//        log\&.info('Directories to be analysed: ' + directoryNamesList);
//        log\&.info('Files to be abalysed : ' + quotedObjectNamesList);
//
//
//        if(statType\&.equals('count') || statType\&.contains('count') ){
//                statsModel\&.setStatsType(FileKommander\&.COUNT);
//               
//        }else if(statType\&.equals('size') || statType\&.contains('size') ){
//                statsModel\&.setStatsType(FileKommander\&.SIZEOF);
//        }else if(statType\&.equals('list') || statType\&.contains('list') ){
//                statsModel\&.setStatsType(FileKommander\&.LIST_FILES);
//        }else if(statType\&.equals('modified') || statType\&.contains('modified') ){
//                statsModel\&.setStatsType(FileKommander\&.LAST_MODIFIED);
//        }
//        return statsModel;

        StatsModel statsModel = new StatsModel();
        FeatureMap featureMap = annotation\&.getFeatures();
        String action = ((String)((Annotation)featureMap\&.get('action'))\&.getFeatures()\&.get('string'))\&.toLowerCase();
        ArrayList<String> fileNamesList = getObjectNameFromAnnotation(
                featureMap, 'fileName');
        ArrayList<String> directoryNamesList = getObjectNameFromAnnotation(
                featureMap, 'directoryName');
        ArrayList<String> quotedObjectNamesList = getObjectNameFromAnnotation(
                featureMap, 'quotedObject');
        if (fileNamesList != null) {
            for (String fileName : fileNamesList) {
                statsModel\&.add(fileName, FileKommander\&.FILE);
            }
        }
        if (directoryNamesList != null) {
            for (String folderName : directoryNamesList) {
                statsModel\&.add(folderName, FileKommander\&.DIRECTORY);
            }
        }
        if (quotedObjectNamesList != null) {
            for (String quotedName : quotedObjectNamesList) {
                if (!fileNamesList\&.contains(quotedName)
                        && !directoryNamesList\&.contains(quotedName))
                    statsModel\&.add(quotedName, FileKommander\&.DIRECTORY);
            }
        }
        log\&.info('Files to be Created : ' + fileNamesList);
        log\&.info('Directories to be Created : ' + directoryNamesList);
        log\&.info('Files to be Created : ' + quotedObjectNamesList);
    //  String actionType= ((String)action\&.getFeatures()\&.get('string'))\&.toLowerCase();

        if(action\&.equals('count') || action\&.contains('count') ){
            statsModel\&.setStatsType(FileKommander\&.COUNT);
            
        }else if(action\&.equals('size') || action\&.contains('size') ){
            statsModel\&.setStatsType(FileKommander\&.SIZEOF);
        }else if(action\&.equals('list') || action\&.contains('list') ){
            statsModel\&.setStatsType(FileKommander\&.LIST_FILES);
        }else if(action\&.equals('modified') || action\&.contains('modified') ){
            statsModel\&.setStatsType(FileKommander\&.LAST_MODIFIED);
        }
        return statsModel;
    }
.fi
.SS "static ArrayList<String> com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.getObjectNameFromAnnotation (FeatureMapfeatureMap, Stringkey)\fC [static]\fP"

.PP
Definition at line 289 of file AnalyseAction\&.java\&.
.PP
.nf
                                               {
        ArrayList<String> outputList = null;
        if (featureMap\&.containsKey(key)) {
            outputList = new ArrayList<String>();
            AnnotationSet objectNames = (AnnotationSet) featureMap\&.get(key);
            for (Annotation object : objectNames) {
                FeatureMap featureMap2 = object\&.getFeatures();
                String objectName = (String) featureMap2\&.get('string');
                objectName = objectName\&.replaceAll('\'', '');
                outputList\&.add(objectName);
            }
        } else {
            return new ArrayList<String>();
        }

        return outputList\&.isEmpty() ? new ArrayList<String>() : outputList;

    }
.fi
.SH "Member Data Documentation"
.PP 
.SS "final Logger com\&.poly\&.nlp\&.filekommander\&.file\&.actions\&.AnalyseAction\&.log = Logger\&.getLogger(AnalyseAction\&.class)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 21 of file AnalyseAction\&.java\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for FileKommander from the source code\&.
